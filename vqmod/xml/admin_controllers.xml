<?xml version="1.0" encoding="utf-8"?>
<modification>
	<id>Admin Controllers</id>
	<version>1.0</version>
	<vqmver>2.5.0</vqmver>
	<author>Logoblossom</author>
	
	<file name="admin/controller/common/footer.php">
		<operation>
            <search position="replace"><![CDATA[
            $data['text_footer'] = $this->language->get('text_footer');
            ]]></search>
            <add><![CDATA[
            $data['text_footer'] = sprintf($this->language->get('text_footer'), $this->config->get('config_name'), date('Y', time()));
            ]]></add>
        </operation>
	</file>
	
	<file name="admin/controller/common/menu.php">
		<operation>
            <search position="after"><![CDATA[
            $data['product'] = $this->url->link('catalog/product', 'token=' . $this->session->data['token'], 'SSL');
            ]]></search>
            <add><![CDATA[
            $data['sold_product'] = $this->url->link('catalog/product/sold', 'token=' . $this->session->data['token'], 'SSL');
            ]]></add>
        </operation>
	</file>
	
	<file name="admin/controller/catalog/product.php">
        <operation>
            <search position="replace"><![CDATA[
            $data['subtract'] = 1;
            ]]></search>
            <add><![CDATA[
           $data['subtract'] = 0;
            ]]></add>
        </operation>
		
		<operation>
            <search position="replace"><![CDATA[
            $data['shipping'] = 1;
            ]]></search>
            <add><![CDATA[
           $data['shipping'] = 0;
            ]]></add>
        </operation>
		
		<operation>
            <search position="before"><![CDATA[
           public function add() {
            ]]></search>
            <add><![CDATA[
           public function sold() {
				$this->load->language('catalog/product');
				
				$this->document->setTitle($this->language->get('sold_product_heading'));
				
				$this->load->model('catalog/product');
				
				$this->getSoldProductList();
			}
			
			protected function getSoldProductList() {
				if (isset($this->request->get['filter_name'])) {
					$filter_name = $this->request->get['filter_name'];
				} else {
					$filter_name = null;
				}
			
				if (isset($this->request->get['filter_model'])) {
					$filter_model = $this->request->get['filter_model'];
				} else {
					$filter_model = null;
				}
				
				$filter_status = -1;
			
				if (isset($this->request->get['sort'])) {
					$sort = $this->request->get['sort'];
				} else {
					$sort = 'pd.name';
				}
			
				if (isset($this->request->get['order'])) {
					$order = $this->request->get['order'];
				} else {
					$order = 'ASC';
				}
			
				if (isset($this->request->get['page'])) {
					$page = $this->request->get['page'];
				} else {
					$page = 1;
				}
			
				$url = '';
			
				if (isset($this->request->get['filter_name'])) {
					$url .= '&filter_name=' . urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));
				}
			
				if (isset($this->request->get['filter_model'])) {
					$url .= '&filter_model=' . urlencode(html_entity_decode($this->request->get['filter_model'], ENT_QUOTES, 'UTF-8'));
				}
			
				if (isset($this->request->get['sort'])) {
					$url .= '&sort=' . $this->request->get['sort'];
				}
			
				if (isset($this->request->get['order'])) {
					$url .= '&order=' . $this->request->get['order'];
				}
			
				if (isset($this->request->get['page'])) {
					$url .= '&page=' . $this->request->get['page'];
				}
			
				$data['breadcrumbs'] = array();
			
				$data['breadcrumbs'][] = array(
					'text' => $this->language->get('text_home'),
					'href' => $this->url->link('common/dashboard', 'token=' . $this->session->data['token'], 'SSL')
				);
			
				$data['breadcrumbs'][] = array(
					'text' => $this->language->get('sold_product_heading'),
					'href' => $this->url->link('catalog/product/sold', 'token=' . $this->session->data['token'] . $url, 'SSL')
				);
			
				$data['products'] = array();
			
				$filter_data = array(
					'filter_name'	  => $filter_name,
					'filter_model'	  => $filter_model,
					'filter_status'   => $filter_status,
					'sort'            => $sort,
					'order'           => $order,
					'start'           => ($page - 1) * $this->config->get('config_limit_admin'),
					'limit'           => $this->config->get('config_limit_admin')
				);
			
				$this->load->model('tool/image');
			
				$product_total = $this->model_catalog_product->getTotalProducts($filter_data);
			
				$results = $this->model_catalog_product->getProducts($filter_data);
			
				foreach ($results as $result) {
					if (is_file(DIR_IMAGE . $result['image'])) {
						$image = $this->model_tool_image->resize($result['image'], 100, 100);
					} else {
						$image = $this->model_tool_image->resize('no_image.png', 100, 100);
					}
			
					$data['products'][] = array(
						'product_id' => $result['product_id'],
						'image'      => $image,
						'name'       => $result['name'],
						'model'      => $result['model'],
						'view'       => $this->url->link('catalog/product/view', 'token=' . $this->session->data['token'] . '&product_id=' . $result['product_id'] . $url, 'SSL')
					);
				}
			
				$data['sold_product_heading'] = $this->language->get('sold_product_heading');
				
				$data['sold_product_text_list'] = $this->language->get('sold_product_text_list');
				$data['text_no_results'] = $this->language->get('text_no_results');
			
				$data['column_image'] = $this->language->get('column_image');
				$data['column_name'] = $this->language->get('column_name');
				$data['column_model'] = $this->language->get('column_model');
				$data['column_action'] = $this->language->get('column_action');
			
				$data['entry_name'] = $this->language->get('entry_name');
				$data['entry_model'] = $this->language->get('entry_model');
			
				$data['button_view'] = $this->language->get('button_view');
				$data['button_filter'] = $this->language->get('button_filter');
			
				$data['token'] = $this->session->data['token'];
			
				$url = '';
			
				if (isset($this->request->get['filter_name'])) {
					$url .= '&filter_name=' . urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));
				}
			
				if (isset($this->request->get['filter_model'])) {
					$url .= '&filter_model=' . urlencode(html_entity_decode($this->request->get['filter_model'], ENT_QUOTES, 'UTF-8'));
				}
			
				if ($order == 'ASC') {
					$url .= '&order=DESC';
				} else {
					$url .= '&order=ASC';
				}
			
				if (isset($this->request->get['page'])) {
					$url .= '&page=' . $this->request->get['page'];
				}
			
				$data['sort_name'] = $this->url->link('catalog/product/sold', 'token=' . $this->session->data['token'] . '&sort=pd.name' . $url, 'SSL');
				$data['sort_model'] = $this->url->link('catalog/product/sold', 'token=' . $this->session->data['token'] . '&sort=p.model' . $url, 'SSL');
				$data['sort_order'] = $this->url->link('catalog/product/sold', 'token=' . $this->session->data['token'] . '&sort=p.sort_order' . $url, 'SSL');
			
				$url = '';
			
				if (isset($this->request->get['filter_name'])) {
					$url .= '&filter_name=' . urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));
				}
			
				if (isset($this->request->get['filter_model'])) {
					$url .= '&filter_model=' . urlencode(html_entity_decode($this->request->get['filter_model'], ENT_QUOTES, 'UTF-8'));
				}
				if (isset($this->request->get['sort'])) {
					$url .= '&sort=' . $this->request->get['sort'];
				}
			
				if (isset($this->request->get['order'])) {
					$url .= '&order=' . $this->request->get['order'];
				}
			
				$pagination = new Pagination();
				$pagination->total = $product_total;
				$pagination->page = $page;
				$pagination->limit = $this->config->get('config_limit_admin');
				$pagination->url = $this->url->link('catalog/product/sold', 'token=' . $this->session->data['token'] . $url . '&page={page}', 'SSL');
			
				$data['pagination'] = $pagination->render();
			
				$data['results'] = sprintf($this->language->get('text_pagination'), ($product_total) ? (($page - 1) * $this->config->get('config_limit_admin')) + 1 : 0, ((($page - 1) * $this->config->get('config_limit_admin')) > ($product_total - $this->config->get('config_limit_admin'))) ? $product_total : ((($page - 1) * $this->config->get('config_limit_admin')) + $this->config->get('config_limit_admin')), $product_total, ceil($product_total / $this->config->get('config_limit_admin')));
			
				$data['filter_name'] = $filter_name;
				$data['filter_model'] = $filter_model;
			
				$data['sort'] = $sort;
				$data['order'] = $order;
			
				$data['header'] = $this->load->controller('common/header');
				$data['column_left'] = $this->load->controller('common/column_left');
				$data['footer'] = $this->load->controller('common/footer');
			
				$this->response->setOutput($this->load->view('catalog/sold_product_list.tpl', $data));
			}
			
			public function view() {
				$this->load->language('catalog/product');
				
				$this->document->setTitle($this->language->get('sold_product_heading'));
				
				$this->load->model('catalog/product');
				
				$this->getSoldProductdetail();
			}
			
			protected function getSoldProductdetail() {
				$data['sold_product_heading'] = $this->language->get('sold_product_heading');
				
				$data['entry_name'] = $this->language->get('entry_name');
				$data['entry_description'] = $this->language->get('entry_description');
				$data['entry_image'] = $this->language->get('entry_image');
				$data['entry_model'] = $this->language->get('entry_model');
				$data['entry_tax_class'] = $this->language->get('entry_tax_class');
				$data['entry_date_available'] = $this->language->get('entry_date_available');
				$data['entry_option_value'] = $this->language->get('entry_option_value');
				$data['entry_price'] = $this->language->get('entry_price');
				$data['entry_manufacturer'] = $this->language->get('entry_manufacturer');
				$data['entry_download'] = $this->language->get('entry_download');
				$data['entry_category'] = $this->language->get('entry_category');
		
				$data['tab_general'] = $this->language->get('tab_general');
				$data['tab_data'] = $this->language->get('tab_data');
				$data['tab_option'] = $this->language->get('tab_option');
				$data['tab_image'] = $this->language->get('tab_image');
				$data['tab_links'] = $this->language->get('tab_links');
				$data['tab_history'] = $this->language->get('tab_history');
		
				$data['button_back'] = $this->language->get('button_back');
		
				$url = '';
		
				if (isset($this->request->get['filter_name'])) {
					$url .= '&filter_name=' . urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));
				}
		
				if (isset($this->request->get['filter_model'])) {
					$url .= '&filter_model=' . urlencode(html_entity_decode($this->request->get['filter_model'], ENT_QUOTES, 'UTF-8'));
				}
		
				if (isset($this->request->get['sort'])) {
					$url .= '&sort=' . $this->request->get['sort'];
				}
		
				if (isset($this->request->get['order'])) {
					$url .= '&order=' . $this->request->get['order'];
				}
		
				if (isset($this->request->get['page'])) {
					$url .= '&page=' . $this->request->get['page'];
				}
		
				$data['breadcrumbs'] = array();
		
				$data['breadcrumbs'][] = array(
					'text' => $this->language->get('text_home'),
					'href' => $this->url->link('common/dashboard', 'token=' . $this->session->data['token'], 'SSL')
				);
		
				$data['breadcrumbs'][] = array(
					'text' => $this->language->get('sold_product_heading'),
					'href' => $this->url->link('catalog/product/sold', 'token=' . $this->session->data['token'] . $url, 'SSL')
				);
		
				if (isset($this->request->get['product_id'])) {
					$product_info = $this->model_catalog_product->getProduct($this->request->get['product_id']);
				}
		
				$data['token'] = $this->session->data['token'];
		
				$this->load->model('localisation/language');
		
				$data['languages'] = $this->model_localisation_language->getLanguages();
				
				$data['back'] = $this->url->link('catalog/product/sold', 'token=' . $this->session->data['token'] . $url, 'SSL');
		
				if (isset($this->request->get['product_id'])) {
					$data['product_description'] = $this->model_catalog_product->getProductDescriptions($this->request->get['product_id']);
				} else {
					$data['product_description'] = array();
				}
		
				if (!empty($product_info)) {
					$data['image'] = $product_info['image'];
				} else {
					$data['image'] = '';
				}
		
				$this->load->model('tool/image');
		
				if (!empty($product_info) && is_file(DIR_IMAGE . $product_info['image'])) {
					$data['thumb'] = $this->model_tool_image->resize($product_info['image'], 100, 100);
				} else {
					$data['thumb'] = $this->model_tool_image->resize('no_image.png', 100, 100);
				}
		
				$data['placeholder'] = $this->model_tool_image->resize('no_image.png', 100, 100);
				
				if (!empty($product_info)) {
					$data['model'] = $product_info['model'];
				} else {
					$data['model'] = '';
				}
		
				$this->load->model('setting/store');
		
				$this->load->model('localisation/tax_class');
		
				$data['tax_classes'] = $this->model_localisation_tax_class->getTaxClasses();
		
				if (!empty($product_info)) {
					$data['tax_class_id'] = $product_info['tax_class_id'];
				} else {
					$data['tax_class_id'] = 0;
				}
		
				if (!empty($product_info)) {
					$data['date_available'] = ($product_info['date_available'] != '0000-00-00') ? $product_info['date_available'] : '';
				} else {
					$data['date_available'] = date('Y-m-d');
				}
		
				$this->load->model('catalog/manufacturer');
		
				if (!empty($product_info)) {
					$data['manufacturer_id'] = $product_info['manufacturer_id'];
				} else {
					$data['manufacturer_id'] = 0;
				}
		
				if (!empty($product_info)) {
					$manufacturer_info = $this->model_catalog_manufacturer->getManufacturer($product_info['manufacturer_id']);
		
					if ($manufacturer_info) {
						$data['manufacturer'] = $manufacturer_info['name'];
					} else {
						$data['manufacturer'] = '';
					}
				} else {
					$data['manufacturer'] = '';
				}
		
				// Categories
				$this->load->model('catalog/category');
		
				if (isset($this->request->get['product_id'])) {
					$categories = $this->model_catalog_product->getProductCategories($this->request->get['product_id']);
				} else {
					$categories = array();
				}
		
				$data['product_categories'] = array();
		
				foreach ($categories as $category_id) {
					$category_info = $this->model_catalog_category->getCategory($category_id);
		
					if ($category_info) {
						$data['product_categories'][] = array(
							'category_id' => $category_info['category_id'],
							'name' => ($category_info['path']) ? $category_info['path'] . ' &gt; ' . $category_info['name'] : $category_info['name']
						);
					}
				}
		
				// Options
				$this->load->model('catalog/option');
		
				if (isset($this->request->get['product_id'])) {
					$product_options = $this->model_catalog_product->getProductOptions($this->request->get['product_id']);
				} else {
					$product_options = array();
				}
		
				$data['product_options'] = array();
		
				foreach ($product_options as $product_option) {
					$product_option_value_data = array();
		
					if (isset($product_option['product_option_value'])) {
						foreach ($product_option['product_option_value'] as $product_option_value) {
							$product_option_value_data[] = array(
								'product_option_value_id' => $product_option_value['product_option_value_id'],
								'option_value_id'         => $product_option_value['option_value_id'],
								'quantity'                => $product_option_value['quantity'],
								'subtract'                => $product_option_value['subtract'],
								'price'                   => $product_option_value['price'],
								'price_prefix'            => $product_option_value['price_prefix'],
								'points'                  => $product_option_value['points'],
								'points_prefix'           => $product_option_value['points_prefix'],
								'weight'                  => $product_option_value['weight'],
								'weight_prefix'           => $product_option_value['weight_prefix']
							);
						}
					}
		
					$data['product_options'][] = array(
						'product_option_id'    => $product_option['product_option_id'],
						'product_option_value' => $product_option_value_data,
						'option_id'            => $product_option['option_id'],
						'name'                 => $product_option['name'],
						'type'                 => $product_option['type'],
						'value'                => isset($product_option['value']) ? $product_option['value'] : '',
						'required'             => $product_option['required']
					);
				}
		
				$data['option_values'] = array();
		
				foreach ($data['product_options'] as $product_option) {
					if ($product_option['type'] == 'select' || $product_option['type'] == 'radio' || $product_option['type'] == 'checkbox' || $product_option['type'] == 'image') {
						if (!isset($data['option_values'][$product_option['option_id']])) {
							$data['option_values'][$product_option['option_id']] = $this->model_catalog_option->getOptionValues($product_option['option_id']);
						}
					}
				}
		
				// Images
				if (isset($this->request->get['product_id'])) {
					$product_images = $this->model_catalog_product->getProductImages($this->request->get['product_id']);
				} else {
					$product_images = array();
				}
		
				$data['product_images'] = array();
		
				foreach ($product_images as $product_image) {
					if (is_file(DIR_IMAGE . $product_image['image'])) {
						$image = $product_image['image'];
						$thumb = $product_image['image'];
					} else {
						$image = '';
						$thumb = 'no_image.png';
					}
		
					$data['product_images'][] = array(
						'image'      => $image,
						'thumb'      => $this->model_tool_image->resize($thumb, 100, 100),
						'sort_order' => $product_image['sort_order']
					);
				}
		
				// Downloads
				$this->load->model('catalog/download');
		
				if (isset($this->request->get['product_id'])) {
					$product_downloads = $this->model_catalog_product->getProductDownloads($this->request->get['product_id']);
				} else {
					$product_downloads = array();
				}
		
				$data['product_downloads'] = array();
		
				foreach ($product_downloads as $download_id) {
					$download_info = $this->model_catalog_download->getDownload($download_id);
		
					if ($download_info) {
						$data['product_downloads'][] = array(
							'download_id' => $download_info['download_id'],
							'name'        => $download_info['name']
						);
					}
				}
		
				if (isset($this->request->get['product_id'])) {
					$products = $this->model_catalog_product->getProductRelated($this->request->get['product_id']);
				} else {
					$products = array();
				}
		
				$data['product_relateds'] = array();
		
				foreach ($products as $product_id) {
					$related_info = $this->model_catalog_product->getProduct($product_id);
		
					if ($related_info) {
						$data['product_relateds'][] = array(
							'product_id' => $related_info['product_id'],
							'name'       => $related_info['name']
						);
					}
				}
				
				//Purchased History
				if (isset($this->request->get['product_id'])) {
					$data['history'] = array();
					$this->load->model('sale/order');
					$order_products = $this->model_sale_order->getOrderProductsByProductId($this->request->get['product_id']);
					foreach($order_products as $order_product){
						$order = $this->model_sale_order->getOrder($order_product['order_id']);
						$order_options = $this->model_sale_order->getOrderOptions($order_product['order_id'], $order_product['order_product_id']);
						$data['history'][] = array(
							'customer' => $order['customer'],
							'order_date' => $order['date_added'],
							'order_option' => $order_options[0]['value']
						);
					}
				}
		
				$data['header'] = $this->load->controller('common/header');
				$data['column_left'] = $this->load->controller('common/column_left');
				$data['footer'] = $this->load->controller('common/footer');
		
				$this->response->setOutput($this->load->view('catalog/sold_product_view.tpl', $data));
			}
            ]]></add>
        </operation>
	</file>
	
</modification>